{"/home/travis/build/npmtest/node-npmtest-ember-power-select/test.js":"/* istanbul instrument in package npmtest_ember_power_select */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/lib.npmtest_ember_power_select.js":"/* istanbul instrument in package npmtest_ember_power_select */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_power_select = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_power_select = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-power-select && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_power_select */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_power_select\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_power_select.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_power_select.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_power_select.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_power_select.__dirname + '/lib.npmtest_ember_power_select.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/index.js":"/* eslint-env node */\n'use strict';\n\n// For ember-cli < 2.7 findHost doesnt exist so we backport from that version\n// for earlier version of ember-cli.\n//https://github.com/ember-cli/ember-cli/blame/16e4492c9ebf3348eb0f31df17215810674dbdf6/lib/models/addon.js#L533\n  function findHostShim() {\n    let current = this;\n    let app;\n    do {\n      app = current.app || app;\n    } while (current.parent.parent && (current = current.parent));\n    return app;\n  }\n\nmodule.exports = {\n  name: 'ember-power-select',\n\n  included(appOrAddon) {\n    let findHost = this._findHost || findHostShim;\n    let app = findHost.call(this);\n    if (!app.__emberPowerSelectIncludedInvoked) {\n      app.__emberPowerSelectIncludedInvoked = true;\n\n      let options = typeof app.options === 'object' ? app.options : {};\n      let addonConfig = options['ember-power-select'] || {};\n\n      // Since ember-power-select styles already `@import` styles of ember-basic-dropdown,\n      // this flag tells to ember-basic-dropdown to skip importing its styles provided\n      // we're using a theme (or the default styles)\n      if (addonConfig.theme !== false) {\n        app.__skipEmberBasicDropdownStyles = true;\n      }\n\n      this._super.included.apply(this, arguments);\n\n      let hasSass = !!app.registry.availablePlugins['ember-cli-sass'];\n      let hasLess = !!app.registry.availablePlugins['ember-cli-less'];\n\n      // Don't include the precompiled css file if the user uses a supported CSS preprocessor\n      if (!hasSass && !hasLess) {\n        if (addonConfig.theme) {\n          app.import(`vendor/ember-power-select-${addonConfig.theme}.css`);\n        } else if (addonConfig.theme !== false) {\n          app.import('vendor/ember-power-select.css');\n        }\n      }\n    }\n  },\n\n  contentFor(type, config) {\n    let emberBasicDropdown = this.addons.find((a) => a.name === 'ember-basic-dropdown');\n    return emberBasicDropdown.contentFor(type, config);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/components/power-select.js":"import Ember from 'ember';\nimport Component from 'ember-component';\nimport layout from '../templates/components/power-select';\nimport fallbackIfUndefined from '../utils/computed-fallback-if-undefined';\nimport { assert } from 'ember-metal/utils';\nimport { isBlank } from 'ember-utils';\nimport { isEmberArray } from 'ember-array/utils';\nimport computed from 'ember-computed';\nimport get from 'ember-metal/get';\nimport set from 'ember-metal/set';\nimport { scheduleOnce } from 'ember-runloop';\nimport {\n  defaultMatcher,\n  indexOfOption,\n  optionAtIndex,\n  filterOptions,\n  countOptions,\n  defaultHighlighted,\n  advanceSelectableOption\n} from '../utils/group-utils';\nimport { task, timeout } from 'ember-concurrency';\n\nconst { isEqual } = Ember;\n\n// Copied from Ember. It shouldn't be necessary in Ember 2.5+\nconst assign = Object.assign || function EmberAssign(original, ...args) {\n  for (let i = 0; i < args.length; i++) {\n    let arg = args[i];\n    if (!arg) {\n      continue;\n    }\n\n    let updates = Object.keys(arg);\n\n    for (let i = 0; i < updates.length; i++) {\n      let prop = updates[i];\n      original[prop] = arg[prop];\n    }\n  }\n\n  return original;\n};\n\nfunction concatWithProperty(strings, property) {\n  if (property) {\n    strings.push(property);\n  }\n  return strings.join(' ');\n}\n\nfunction toPlainArray(collection) {\n  return collection.toArray ? collection.toArray() : collection;\n}\n\nconst initialState = {\n  options: [],              // Contains the resolved collection of options\n  results: [],              // Contains the active set of results\n  resultsCount: 0,          // Contains the number of results incuding those nested/disabled\n  selected: undefined,      // Contains the resolved selected option\n  highlighted: undefined,   // Contains the currently highlighted option (if any)\n  searchText: '',           // Contains the text of the current search\n  lastSearchedText: '',     // Contains the text of the last finished search\n  loading: false,           // Truthy if there is a pending promise that will update the results\n  isActive: false,          // Truthy if the trigger is focused. Other subcomponents can mark it as active depending on other logic.\n  // Private API (for now)\n  _expirableSearchText: ''\n};\n\nexport default Component.extend({\n  // HTML\n  layout,\n  tagName: '',\n\n  // Options\n  searchEnabled: fallbackIfUndefined(true),\n  matchTriggerWidth: fallbackIfUndefined(true),\n  matcher: fallbackIfUndefined(defaultMatcher),\n  loadingMessage: fallbackIfUndefined('Loading options...'),\n  noMatchesMessage: fallbackIfUndefined('No results found'),\n  searchMessage: fallbackIfUndefined('Type to search'),\n  closeOnSelect: fallbackIfUndefined(true),\n  defaultHighlighted: fallbackIfUndefined(defaultHighlighted),\n\n  afterOptionsComponent: fallbackIfUndefined(null),\n  beforeOptionsComponent: fallbackIfUndefined('power-select/before-options'),\n  optionsComponent: fallbackIfUndefined('power-select/options'),\n  groupComponent: fallbackIfUndefined('power-select/power-select-group'),\n  selectedItemComponent: fallbackIfUndefined(null),\n  triggerComponent: fallbackIfUndefined('power-select/trigger'),\n  searchMessageComponent: fallbackIfUndefined('power-select/search-message'),\n  placeholderComponent: fallbackIfUndefined('power-select/placeholder'),\n\n  _triggerTagName: fallbackIfUndefined('div'),\n  _contentTagName: fallbackIfUndefined('div'),\n\n  // Private state\n  publicAPI: initialState,\n\n  // Lifecycle hooks\n  init() {\n    this._super(...arguments);\n    this._publicAPIActions = {\n      search: (...args) => this.send('search', ...args),\n      highlight: (...args) => this.send('highlight', ...args),\n      select: (...args) => this.send('select', ...args),\n      choose: (...args) => this.send('choose', ...args),\n      scrollTo: (...args) => scheduleOnce('afterRender', this, this.send, 'scrollTo', ...args)\n    };\n    assert('{{power-select}} requires an `onchange` function', this.get('onchange') && typeof this.get('onchange') === 'function');\n  },\n\n  willDestroy() {\n    this._super(...arguments);\n    this._removeObserversInOptions();\n    this._removeObserversInSelected();\n    let action = this.get('registerAPI');\n    if (action) {\n      action(null);\n    }\n  },\n\n  // CPs\n  selected: computed({\n    get() {\n      return null;\n    },\n    set(_, selected) {\n      if (selected && selected.then) {\n        this.get('_updateSelectedTask').perform(selected);\n      } else {\n        scheduleOnce('actions', this, this.updateSelection, selected);\n      }\n      return selected;\n    }\n  }),\n\n  options: computed({\n    get() {\n      return [];\n    },\n    set(_, options, oldOptions) {\n      if (options === oldOptions) {\n        return options;\n      }\n      if (options && options.then) {\n        this.get('_updateOptionsTask').perform(options);\n      } else {\n        scheduleOnce('actions', this, this.updateOptions, options);\n      }\n      return options;\n    }\n  }),\n\n  optionMatcher: computed('searchField', 'matcher', function() {\n    let { matcher, searchField } = this.getProperties('matcher', 'searchField');\n    if (searchField && matcher === defaultMatcher) {\n      return (option, text) => matcher(get(option, searchField), text);\n    } else {\n      return (option, text) => matcher(option, text);\n    }\n  }),\n\n  concatenatedTriggerClasses: computed('triggerClass', 'publicAPI.isActive', function() {\n    let classes = ['ember-power-select-trigger'];\n    if (this.get('publicAPI.isActive')) {\n      classes.push('ember-power-select-trigger--active');\n    }\n    return concatWithProperty(classes, this.get('triggerClass'));\n  }),\n\n  concatenatedDropdownClasses: computed('dropdownClass', 'publicAPI.isActive', function() {\n    let classes = ['ember-power-select-dropdown'];\n    if (this.get('publicAPI.isActive')) {\n      classes.push('ember-power-select-dropdown--active');\n    }\n    return concatWithProperty(classes, this.get('dropdownClass'));\n  }),\n\n  mustShowSearchMessage: computed('publicAPI.{loading,searchText,resultsCount}', 'search', 'searchMessage', function() {\n    let publicAPI = this.get('publicAPI');\n    return !publicAPI.loading && publicAPI.searchText.length === 0\n      && !!this.get('search') && !!this.get('searchMessage')\n      && publicAPI.resultsCount === 0;\n  }),\n\n  mustShowNoMessages: computed('search', 'publicAPI.{lastSearchedText,resultsCount,loading}', function() {\n    let publicAPI = this.get('publicAPI');\n    return !publicAPI.loading\n      && publicAPI.resultsCount === 0\n      && (!this.get('search') || publicAPI.lastSearchedText.length > 0);\n  }),\n\n  // Actions\n  actions: {\n    registerAPI(dropdown) {\n      if (!dropdown) {\n        return;\n      }\n      let publicAPI = assign({}, this.get('publicAPI'), dropdown);\n      publicAPI.actions = assign({}, dropdown.actions, this._publicAPIActions);\n      this.setProperties({\n        publicAPI,\n        optionsId: `ember-power-select-options-${publicAPI.uniqueId}`\n      });\n      let action = this.get('registerAPI');\n      if (action) {\n        action(publicAPI);\n      }\n    },\n\n    onOpen(_, e) {\n      let action = this.get('onopen');\n      if (action && action(this.get('publicAPI'), e) === false) {\n        return false;\n      }\n      if (e) {\n        this.openingEvent = e;\n        if (e.type === 'keydown' && (e.keyCode === 38 || e.keyCode === 40)) {\n          e.preventDefault();\n        }\n      }\n      this.resetHighlighted();\n    },\n\n    onClose(_, e) {\n      let action = this.get('onclose');\n      if (action && action(this.get('publicAPI'), e) === false) {\n        return false;\n      }\n      if (e) {\n        this.openingEvent = null;\n      }\n      this.updateState({ highlighted: undefined });\n    },\n\n    onInput(e) {\n      let term = e.target.value;\n      let action = this.get('oninput');\n      let publicAPI = this.get('publicAPI');\n      let correctedTerm;\n      if (action) {\n        correctedTerm = action(e.target.value, publicAPI, e);\n        if (correctedTerm === false) {\n          return;\n        }\n      }\n      publicAPI.actions.search(typeof correctedTerm === 'string' ? correctedTerm : term);\n    },\n\n    highlight(option /* , e */) {\n      if (option && get(option, 'disabled')) {\n        return;\n      }\n      this.updateState({ highlighted: option });\n    },\n\n    select(selected /* , e */) {\n      let publicAPI = this.get('publicAPI');\n      if (!isEqual(publicAPI.selected, selected)) {\n        this.get('onchange')(selected, publicAPI);\n      }\n    },\n\n    search(term) {\n      if (isBlank(term)) {\n        this._resetSearch();\n      } else if (this.get('search')) {\n        this._performSearch(term);\n      } else {\n        this._performFilter(term);\n      }\n    },\n\n    choose(selected, e) {\n      if (e && e.clientY) {\n        if (this.openingEvent && this.openingEvent.clientY) {\n          if (Math.abs(this.openingEvent.clientY - e.clientY) < 2) {\n            return;\n          }\n        }\n      }\n      let publicAPI = this.get('publicAPI');\n      publicAPI.actions.select(this.get('buildSelection')(selected, publicAPI), e);\n      if (this.get('closeOnSelect')) {\n        publicAPI.actions.close(e);\n        return false;\n      }\n    },\n\n    // keydowns handled by the trigger provided by ember-basic-dropdown\n    onTriggerKeydown(_, e) {\n      let onkeydown = this.get('onkeydown');\n      if (onkeydown && onkeydown(this.get('publicAPI'), e) === false) {\n        return false;\n      }\n      if (e.keyCode >= 48 && e.keyCode <= 90) { // Keys 0-9, a-z or SPACE\n        this.get('triggerTypingTask').perform(e);\n      } else if (e.keyCode === 32) {  // Space\n        return this._handleKeySpace(e);\n      } else {\n        return this._routeKeydown(e);\n      }\n    },\n\n    // keydowns handled by inputs inside the component\n    onKeydown(e) {\n      let onkeydown = this.get('onkeydown');\n      if (onkeydown && onkeydown(this.get('publicAPI'), e) === false) {\n        return false;\n      }\n      return this._routeKeydown(e);\n    },\n\n    scrollTo(option /* , e */) {\n      if (!self.document || !option) {\n        return;\n      }\n      let publicAPI = this.get('publicAPI');\n      let optionsList = self.document.getElementById(`ember-power-select-options-${publicAPI.uniqueId}`);\n      if (!optionsList) {\n        return;\n      }\n      let index = indexOfOption(publicAPI.results, option);\n      if (index === -1) {\n        return;\n      }\n      let optionElement = optionsList.querySelectorAll('[data-option-index]').item(index);\n      let optionTopScroll = optionElement.offsetTop - optionsList.offsetTop;\n      let optionBottomScroll = optionTopScroll + optionElement.offsetHeight;\n      if (optionBottomScroll > optionsList.offsetHeight + optionsList.scrollTop) {\n        optionsList.scrollTop = optionBottomScroll - optionsList.offsetHeight;\n      } else if (optionTopScroll < optionsList.scrollTop) {\n        optionsList.scrollTop = optionTopScroll;\n      }\n    },\n\n    onTriggerFocus(_, event) {\n      this.send('activate');\n      let action = this.get('onfocus');\n      if (action) {\n        action(this.get('publicAPI'), event);\n      }\n    },\n\n    onFocus(event) {\n      this.send('activate');\n      let action = this.get('onfocus');\n      if (action) {\n        action(this.get('publicAPI'), event);\n      }\n    },\n\n    onTriggerBlur(_, event) {\n      this.send('deactivate');\n      let action = this.get('onblur');\n      if (action) {\n        action(this.get('publicAPI'), event);\n      }\n    },\n\n    onBlur(event) {\n      this.send('deactivate');\n      let action = this.get('onblur');\n      if (action) {\n        action(this.get('publicAPI'), event);\n      }\n    },\n\n    activate() {\n      scheduleOnce('actions', this, 'setIsActive', true);\n    },\n\n    deactivate() {\n      scheduleOnce('actions', this, 'setIsActive', false);\n    }\n  },\n\n  // Tasks\n  triggerTypingTask: task(function* (e) {\n    let publicAPI = this.get('publicAPI');\n    let term = publicAPI._expirableSearchText + String.fromCharCode(e.keyCode);\n    this.updateState({ _expirableSearchText: term });\n    let matches = this.filter(publicAPI.options, term, true);\n    if (get(matches, 'length') > 0) {\n      let firstMatch = optionAtIndex(matches, 0);\n      if (firstMatch !== undefined) {\n        if (publicAPI.isOpen) {\n          publicAPI.actions.highlight(firstMatch.option, e);\n          publicAPI.actions.scrollTo(firstMatch.option, e);\n        } else {\n          publicAPI.actions.select(firstMatch.option, e);\n        }\n      }\n    }\n    yield timeout(1000);\n    this.updateState({ _expirableSearchText: '' });\n  }).restartable(),\n\n  _updateSelectedTask: task(function* (selectionPromise) {\n    let selection = yield selectionPromise;\n    this.updateSelection(selection);\n  }).restartable(),\n\n  _updateOptionsTask: task(function* (optionsPromise) {\n    this.updateState({ loading: true });\n    try {\n      let options = yield optionsPromise;\n      this.updateOptions(options);\n    } finally {\n      this.updateState({ loading: false });\n    }\n  }).restartable(),\n\n  handleAsyncSearchTask: task(function* (term, searchThenable) {\n    try {\n      this.updateState({ loading: true });\n      let results = yield searchThenable;\n      let resultsArray = toPlainArray(results);\n      this.updateState({\n        results: resultsArray,\n        lastSearchedText: term,\n        resultsCount: countOptions(results),\n        loading: false\n      });\n      this.resetHighlighted();\n    } catch(e) {\n      this.updateState({ lastSearchedText: term, loading: false });\n    } finally {\n      if (typeof searchThenable.cancel === 'function') {\n        searchThenable.cancel();\n      }\n    }\n  }).restartable(),\n\n  // Methods\n  setIsActive(isActive) {\n    this.updateState({ isActive });\n  },\n\n  filter(options, term, skipDisabled = false) {\n    return filterOptions(options || [], term, this.get('optionMatcher'), skipDisabled);\n  },\n\n  updateOptions(options) {\n    this._removeObserversInOptions();\n    if (!options) {\n      return;\n    }\n    if (options && options.addObserver) {\n      options.addObserver('[]', this, this._updateOptionsAndResults);\n      this._observedOptions = options;\n    }\n    this._updateOptionsAndResults(options);\n  },\n\n  updateSelection(selection) {\n    this._removeObserversInSelected();\n    if (isEmberArray(selection)) {\n      if (selection && selection.addObserver) {\n        selection.addObserver('[]', this, this._updateSelectedArray);\n        this._observedSelected = selection;\n      }\n      this._updateSelectedArray(selection);\n    } else if (selection !== this.get('publicAPI').selected) {\n      this.updateState({ selected: selection, highlighted: selection });\n    }\n  },\n\n  resetHighlighted() {\n    let publicAPI = this.get('publicAPI');\n    let defaultHightlighted = this.get('defaultHighlighted');\n    let highlighted;\n    if (typeof defaultHightlighted === 'function') {\n      highlighted = defaultHightlighted(publicAPI);\n    } else {\n      highlighted = defaultHightlighted;\n    }\n    this.updateState({ highlighted });\n  },\n\n  buildSelection(option /* , select */) {\n    return option;\n  },\n\n  _updateOptionsAndResults(opts) {\n    if (get(this, 'isDestroyed')) {\n      return;\n    }\n    let options = toPlainArray(opts);\n    let publicAPI;\n    if (this.get('search')) { // external search\n      publicAPI = this.updateState({ options, results: options, resultsCount: countOptions(options), loading: false });\n    } else { // filter\n      publicAPI = this.get('publicAPI');\n      let results = isBlank(publicAPI.searchText) ? options : this.filter(options, publicAPI.searchText);\n      publicAPI = this.updateState({ results, options, resultsCount: countOptions(results), loading: false });\n    }\n    if (publicAPI.isOpen) {\n      this.resetHighlighted();\n    }\n  },\n\n  _updateSelectedArray(selection) {\n    if (get(this, 'isDestroyed')) {\n      return;\n    }\n    this.updateState({ selected: toPlainArray(selection) });\n  },\n\n  _resetSearch() {\n    let results = this.get('publicAPI').options;\n    this.get('handleAsyncSearchTask').cancelAll();\n    this.updateState({\n      results,\n      searchText: '',\n      lastSearchedText: '',\n      resultsCount: countOptions(results),\n      loading: false\n    });\n  },\n\n  _performFilter(term) {\n    let results = this.filter(this.get('publicAPI').options, term);\n    this.updateState({ results, searchText: term, lastSearchedText: term, resultsCount: countOptions(results) });\n    this.resetHighlighted();\n  },\n\n  _performSearch(term) {\n    let searchAction = this.get('search');\n    let publicAPI = this.updateState({ searchText: term });\n    let search = searchAction(term, publicAPI);\n    if (!search) {\n      publicAPI = this.updateState({ lastSearchedText: term });\n    } else if (search.then) {\n      this.get('handleAsyncSearchTask').perform(term, search);\n    } else {\n      let resultsArray = toPlainArray(search);\n      this.updateState({ results: resultsArray, lastSearchedText: term, resultsCount: countOptions(resultsArray) });\n      this.resetHighlighted();\n    }\n  },\n\n  _routeKeydown(e) {\n    if (e.keyCode === 38 || e.keyCode === 40) { // Up & Down\n      return this._handleKeyUpDown(e);\n    } else if (e.keyCode === 13) {  // ENTER\n      return this._handleKeyEnter(e);\n    } else if (e.keyCode === 9) {   // Tab\n      return this._handleKeyTab(e);\n    } else if (e.keyCode === 27) {  // ESC\n      return this._handleKeyESC(e);\n    }\n  },\n\n  _handleKeyUpDown(e) {\n    let publicAPI = this.get('publicAPI');\n    if (publicAPI.isOpen) {\n      e.preventDefault();\n      e.stopPropagation();\n      let step = e.keyCode === 40 ? 1 : -1;\n      let newHighlighted = advanceSelectableOption(publicAPI.results, publicAPI.highlighted, step);\n      publicAPI.actions.highlight(newHighlighted, e);\n      publicAPI.actions.scrollTo(newHighlighted);\n    } else {\n      publicAPI.actions.open(e);\n    }\n  },\n\n  _handleKeyEnter(e) {\n    let publicAPI = this.get('publicAPI');\n    if (publicAPI.isOpen && publicAPI.highlighted !== undefined) {\n      publicAPI.actions.choose(publicAPI.highlighted, e);\n      return false;\n    }\n  },\n\n  _handleKeySpace(e) {\n    let publicAPI = this.get('publicAPI');\n    if (publicAPI.isOpen && publicAPI.highlighted !== undefined) {\n      publicAPI.actions.choose(publicAPI.highlighted, e);\n      return false;\n    }\n  },\n\n  _handleKeyTab(e) {\n    this.get('publicAPI').actions.close(e);\n  },\n\n  _handleKeyESC(e) {\n    this.get('publicAPI').actions.close(e);\n  },\n\n  _removeObserversInOptions() {\n    if (this._observedOptions) {\n      this._observedOptions.removeObserver('[]', this, this._updateOptionsAndResults);\n    }\n  },\n\n  _removeObserversInSelected() {\n    if (this._observedSelected) {\n      this._observedSelected.removeObserver('[]', this, this._updateSelectedArray);\n    }\n  },\n\n  updateState(changes) {\n    let newState = set(this, 'publicAPI', assign({}, this.get('publicAPI'), changes));\n    let registerAPI = this.get('registerAPI');\n    if (registerAPI) {\n      registerAPI(newState);\n    }\n    return newState;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/components/power-select-multiple.js":"import Ember from 'ember';\nimport Component from 'ember-component';\nimport computed from 'ember-computed';\nimport layout from '../templates/components/power-select-multiple';\nimport fallbackIfUndefined from '../utils/computed-fallback-if-undefined';\n\nconst { isEqual } = Ember;\n\nexport default Component.extend({\n  layout,\n  // Config\n  triggerComponent: fallbackIfUndefined('power-select-multiple/trigger'),\n  beforeOptionsComponent: fallbackIfUndefined(null),\n\n  // CPs\n  concatenatedTriggerClass: computed('triggerClass', function() {\n    let classes = ['ember-power-select-multiple-trigger'];\n    if (this.get('triggerClass')) {\n      classes.push(this.get('triggerClass'));\n    }\n    return classes.join(' ');\n  }),\n\n  selected: computed({\n    get() {\n      return [];\n    },\n    set(_, v) {\n      if (v === null || v === undefined) {\n        return [];\n      }\n      return v;\n    }\n  }),\n\n  computedTabIndex: computed('tabindex', 'searchEnabled', 'triggerComponent', function() {\n    if (this.get('triggerComponent') === 'power-select-multiple/trigger' && this.get('searchEnabled') !== false) {\n      return '-1';\n    } else {\n      return this.get('tabindex');\n    }\n  }),\n\n  // Actions\n  actions: {\n    handleOpen(select, e) {\n      let action = this.get('onopen');\n      if (action && action(select, e) === false) {\n        return false;\n      }\n      this.focusInput();\n    },\n\n    handleFocus(select, e) {\n      let action = this.get('onfocus');\n      if (action) {\n        action(select, e);\n      }\n      this.focusInput();\n    },\n\n    handleKeydown(select, e) {\n      let action = this.get('onkeydown');\n      if (action && action(select, e) === false) {\n        e.stopPropagation();\n        return false;\n      }\n      if (e.keyCode === 13 && select.isOpen) {\n        e.stopPropagation();\n        if (select.highlighted !== undefined) {\n          if (!select.selected || select.selected.indexOf(select.highlighted) === -1) {\n            select.actions.choose(select.highlighted, e);\n            return false;\n          } else {\n            select.actions.close(e);\n            return false;\n          }\n        } else {\n          select.actions.close(e);\n          return false;\n        }\n      }\n    },\n\n    buildSelection(option, select) {\n      let newSelection = (select.selected || []).slice(0);\n      let idx = -1;\n      for (let i = 0; i < newSelection.length; i++) {\n        if (isEqual(newSelection[i], option)) {\n          idx = i;\n          break;\n        }\n      }\n      if (idx > -1) {\n        newSelection.splice(idx, 1);\n      } else {\n        newSelection.push(option);\n      }\n      return newSelection;\n    }\n  },\n\n  // Methods\n  focusInput() {\n    let input = this.element.querySelector('.ember-power-select-trigger-multiple-input');\n    if (input) {\n      input.focus();\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/helpers/ember-power-select-is-group.js":"import { helper } from 'ember-helper';\nimport { isGroup } from '../utils/group-utils';\n\nexport function emberPowerSelectIsGroup([maybeGroup]) {\n  return isGroup(maybeGroup);\n}\n\nexport default helper(emberPowerSelectIsGroup);\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/helpers/ember-power-select-is-selected.js":"import Ember from 'ember';\nimport { helper } from 'ember-helper';\nimport { isEmberArray } from 'ember-array/utils';\n\nconst { isEqual } = Ember;\n\n// TODO: Make it private or scoped to the component\nexport function emberPowerSelectIsSelected([option, selected]/* , hash*/) {\n  if (selected === undefined || selected === null) {\n    return false;\n  }\n  if (isEmberArray(selected)) {\n    for (let i = 0; i < selected.length; i++) {\n      if (isEqual(selected[i], option)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return isEqual(option, selected);\n  }\n}\n\nexport default helper(emberPowerSelectIsSelected);\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/helpers/ember-power-select-true-string-if-present.js":"import { helper } from 'ember-helper';\n\nexport function emberPowerSelectTrueStringIfPresent([bool]/* , hash*/) {\n  return bool ? 'true' : false;\n}\n\nexport default helper(emberPowerSelectTrueStringIfPresent);\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/utils/computed-fallback-if-undefined.js":"import computed from 'ember-computed';\n\nexport default function computedFallbackIfUndefined(fallback) {\n  return computed({\n    get() {\n      return fallback;\n    },\n    set(_, v) {\n      return v === undefined ? fallback : v;\n    }\n  });\n}","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/utils/group-utils.js":"import { A } from 'ember-array/utils';\nimport get from 'ember-metal/get';\n\nexport function isGroup(entry) {\n  return !!entry && !!get(entry, 'groupName') && !!get(entry, 'options');\n}\n\nexport function countOptions(collection) {\n  let counter = 0;\n  (function walk(collection) {\n    if (!collection) {\n      return null;\n    }\n    for (let i = 0; i < get(collection, 'length'); i++) {\n      let entry = collection.objectAt ? collection.objectAt(i) : collection[i];\n      if (isGroup(entry)) {\n        walk(get(entry, 'options'));\n      } else {\n        counter++;\n      }\n    }\n  })(collection);\n  return counter;\n}\n\nexport function indexOfOption(collection, option) {\n  let index = 0;\n  return (function walk(collection) {\n    if (!collection) {\n      return null;\n    }\n    for (let i = 0; i < get(collection, 'length'); i++) {\n      let entry = collection.objectAt ? collection.objectAt(i) : collection[i];\n      if (isGroup(entry)) {\n        let result = walk(get(entry, 'options'));\n        if (result > -1) {\n          return result;\n        }\n      } else if (entry === option) {\n        return index;\n      } else {\n        index++;\n      }\n    }\n    return -1;\n  })(collection);\n}\n\nexport function optionAtIndex(originalCollection, index) {\n  let counter = 0;\n  return (function walk(collection, ancestorIsDisabled) {\n    if (!collection || index < 0) {\n      return { disabled: false, option: undefined };\n    }\n    let localCounter = 0;\n    let length = get(collection, 'length');\n    while (counter <= index && localCounter < length) {\n      let entry = collection.objectAt ? collection.objectAt(localCounter) : collection[localCounter];\n      if (isGroup(entry)) {\n        let found = walk(get(entry, 'options'), ancestorIsDisabled || !!get(entry, 'disabled'));\n        if (found) {\n          return found;\n        }\n      } else if (counter === index) {\n        return { disabled: ancestorIsDisabled || !!get(entry, 'disabled'), option: entry };\n      } else {\n        counter++;\n      }\n      localCounter++;\n    }\n  })(originalCollection, false) || { disabled: false, option: undefined };\n}\n\nexport function filterOptions(options, text, matcher, skipDisabled = false) {\n  let opts = A();\n  let length = get(options, 'length');\n  for (let i = 0; i < length; i++) {\n    let entry = options.objectAt ? options.objectAt(i) : options[i];\n    if (!skipDisabled || !get(entry, 'disabled')) {\n      if (isGroup(entry)) {\n        let suboptions = filterOptions(get(entry, 'options'), text, matcher, skipDisabled);\n        if (get(suboptions, 'length') > 0) {\n          let groupCopy = { groupName: entry.groupName, options: suboptions };\n          if (entry.hasOwnProperty('disabled')) {\n            groupCopy.disabled = entry.disabled;\n          }\n          opts.push(groupCopy);\n        }\n      } else if (matcher(entry, text) >= 0) {\n        opts.push(entry);\n      }\n    }\n  }\n  return opts;\n}\n\nexport function defaultHighlighted(select) {\n  let { results, highlighted, selected } = select;\n  let option = highlighted || selected;\n  if (option === undefined || indexOfOption(results, option) === -1) {\n    return advanceSelectableOption(results, option, 1);\n  }\n  return option;\n}\n\nexport function advanceSelectableOption(options, currentOption, step) {\n  let resultsLength = countOptions(options);\n  let startIndex = Math.min(Math.max(indexOfOption(options, currentOption) + step, 0), resultsLength - 1);\n  let { disabled, option } = optionAtIndex(options, startIndex);\n  while (option && disabled) {\n    let next = optionAtIndex(options, startIndex += step);\n    disabled = next.disabled;\n    option = next.option;\n  }\n  return option;\n}\n\nconst DIACRITICS = {\n  'Ⓐ': 'A',\n  'Ａ': 'A',\n  'À': 'A',\n  'Á': 'A',\n  'Â': 'A',\n  'Ầ': 'A',\n  'Ấ': 'A',\n  'Ẫ': 'A',\n  'Ẩ': 'A',\n  'Ã': 'A',\n  'Ā': 'A',\n  'Ă': 'A',\n  'Ằ': 'A',\n  'Ắ': 'A',\n  'Ẵ': 'A',\n  'Ẳ': 'A',\n  'Ȧ': 'A',\n  'Ǡ': 'A',\n  'Ä': 'A',\n  'Ǟ': 'A',\n  'Ả': 'A',\n  'Å': 'A',\n  'Ǻ': 'A',\n  'Ǎ': 'A',\n  'Ȁ': 'A',\n  'Ȃ': 'A',\n  'Ạ': 'A',\n  'Ậ': 'A',\n  'Ặ': 'A',\n  'Ḁ': 'A',\n  'Ą': 'A',\n  'Ⱥ': 'A',\n  'Ɐ': 'A',\n  'Ꜳ': 'AA',\n  'Æ': 'AE',\n  'Ǽ': 'AE',\n  'Ǣ': 'AE',\n  'Ꜵ': 'AO',\n  'Ꜷ': 'AU',\n  'Ꜹ': 'AV',\n  'Ꜻ': 'AV',\n  'Ꜽ': 'AY',\n  'Ⓑ': 'B',\n  'Ｂ': 'B',\n  'Ḃ': 'B',\n  'Ḅ': 'B',\n  'Ḇ': 'B',\n  'Ƀ': 'B',\n  'Ƃ': 'B',\n  'Ɓ': 'B',\n  'Ⓒ': 'C',\n  'Ｃ': 'C',\n  'Ć': 'C',\n  'Ĉ': 'C',\n  'Ċ': 'C',\n  'Č': 'C',\n  'Ç': 'C',\n  'Ḉ': 'C',\n  'Ƈ': 'C',\n  'Ȼ': 'C',\n  'Ꜿ': 'C',\n  'Ⓓ': 'D',\n  'Ｄ': 'D',\n  'Ḋ': 'D',\n  'Ď': 'D',\n  'Ḍ': 'D',\n  'Ḑ': 'D',\n  'Ḓ': 'D',\n  'Ḏ': 'D',\n  'Đ': 'D',\n  'Ƌ': 'D',\n  'Ɗ': 'D',\n  'Ɖ': 'D',\n  'Ꝺ': 'D',\n  'Ǳ': 'DZ',\n  'Ǆ': 'DZ',\n  'ǲ': 'Dz',\n  'ǅ': 'Dz',\n  'Ⓔ': 'E',\n  'Ｅ': 'E',\n  'È': 'E',\n  'É': 'E',\n  'Ê': 'E',\n  'Ề': 'E',\n  'Ế': 'E',\n  'Ễ': 'E',\n  'Ể': 'E',\n  'Ẽ': 'E',\n  'Ē': 'E',\n  'Ḕ': 'E',\n  'Ḗ': 'E',\n  'Ĕ': 'E',\n  'Ė': 'E',\n  'Ë': 'E',\n  'Ẻ': 'E',\n  'Ě': 'E',\n  'Ȅ': 'E',\n  'Ȇ': 'E',\n  'Ẹ': 'E',\n  'Ệ': 'E',\n  'Ȩ': 'E',\n  'Ḝ': 'E',\n  'Ę': 'E',\n  'Ḙ': 'E',\n  'Ḛ': 'E',\n  'Ɛ': 'E',\n  'Ǝ': 'E',\n  'Ⓕ': 'F',\n  'Ｆ': 'F',\n  'Ḟ': 'F',\n  'Ƒ': 'F',\n  'Ꝼ': 'F',\n  'Ⓖ': 'G',\n  'Ｇ': 'G',\n  'Ǵ': 'G',\n  'Ĝ': 'G',\n  'Ḡ': 'G',\n  'Ğ': 'G',\n  'Ġ': 'G',\n  'Ǧ': 'G',\n  'Ģ': 'G',\n  'Ǥ': 'G',\n  'Ɠ': 'G',\n  'Ꞡ': 'G',\n  'Ᵹ': 'G',\n  'Ꝿ': 'G',\n  'Ⓗ': 'H',\n  'Ｈ': 'H',\n  'Ĥ': 'H',\n  'Ḣ': 'H',\n  'Ḧ': 'H',\n  'Ȟ': 'H',\n  'Ḥ': 'H',\n  'Ḩ': 'H',\n  'Ḫ': 'H',\n  'Ħ': 'H',\n  'Ⱨ': 'H',\n  'Ⱶ': 'H',\n  'Ɥ': 'H',\n  'Ⓘ': 'I',\n  'Ｉ': 'I',\n  'Ì': 'I',\n  'Í': 'I',\n  'Î': 'I',\n  'Ĩ': 'I',\n  'Ī': 'I',\n  'Ĭ': 'I',\n  'İ': 'I',\n  'Ï': 'I',\n  'Ḯ': 'I',\n  'Ỉ': 'I',\n  'Ǐ': 'I',\n  'Ȉ': 'I',\n  'Ȋ': 'I',\n  'Ị': 'I',\n  'Į': 'I',\n  'Ḭ': 'I',\n  'Ɨ': 'I',\n  'Ⓙ': 'J',\n  'Ｊ': 'J',\n  'Ĵ': 'J',\n  'Ɉ': 'J',\n  'Ⓚ': 'K',\n  'Ｋ': 'K',\n  'Ḱ': 'K',\n  'Ǩ': 'K',\n  'Ḳ': 'K',\n  'Ķ': 'K',\n  'Ḵ': 'K',\n  'Ƙ': 'K',\n  'Ⱪ': 'K',\n  'Ꝁ': 'K',\n  'Ꝃ': 'K',\n  'Ꝅ': 'K',\n  'Ꞣ': 'K',\n  'Ⓛ': 'L',\n  'Ｌ': 'L',\n  'Ŀ': 'L',\n  'Ĺ': 'L',\n  'Ľ': 'L',\n  'Ḷ': 'L',\n  'Ḹ': 'L',\n  'Ļ': 'L',\n  'Ḽ': 'L',\n  'Ḻ': 'L',\n  'Ł': 'L',\n  'Ƚ': 'L',\n  'Ɫ': 'L',\n  'Ⱡ': 'L',\n  'Ꝉ': 'L',\n  'Ꝇ': 'L',\n  'Ꞁ': 'L',\n  'Ǉ': 'LJ',\n  'ǈ': 'Lj',\n  'Ⓜ': 'M',\n  'Ｍ': 'M',\n  'Ḿ': 'M',\n  'Ṁ': 'M',\n  'Ṃ': 'M',\n  'Ɱ': 'M',\n  'Ɯ': 'M',\n  'Ⓝ': 'N',\n  'Ｎ': 'N',\n  'Ǹ': 'N',\n  'Ń': 'N',\n  'Ñ': 'N',\n  'Ṅ': 'N',\n  'Ň': 'N',\n  'Ṇ': 'N',\n  'Ņ': 'N',\n  'Ṋ': 'N',\n  'Ṉ': 'N',\n  'Ƞ': 'N',\n  'Ɲ': 'N',\n  'Ꞑ': 'N',\n  'Ꞥ': 'N',\n  'Ǌ': 'NJ',\n  'ǋ': 'Nj',\n  'Ⓞ': 'O',\n  'Ｏ': 'O',\n  'Ò': 'O',\n  'Ó': 'O',\n  'Ô': 'O',\n  'Ồ': 'O',\n  'Ố': 'O',\n  'Ỗ': 'O',\n  'Ổ': 'O',\n  'Õ': 'O',\n  'Ṍ': 'O',\n  'Ȭ': 'O',\n  'Ṏ': 'O',\n  'Ō': 'O',\n  'Ṑ': 'O',\n  'Ṓ': 'O',\n  'Ŏ': 'O',\n  'Ȯ': 'O',\n  'Ȱ': 'O',\n  'Ö': 'O',\n  'Ȫ': 'O',\n  'Ỏ': 'O',\n  'Ő': 'O',\n  'Ǒ': 'O',\n  'Ȍ': 'O',\n  'Ȏ': 'O',\n  'Ơ': 'O',\n  'Ờ': 'O',\n  'Ớ': 'O',\n  'Ỡ': 'O',\n  'Ở': 'O',\n  'Ợ': 'O',\n  'Ọ': 'O',\n  'Ộ': 'O',\n  'Ǫ': 'O',\n  'Ǭ': 'O',\n  'Ø': 'O',\n  'Ǿ': 'O',\n  'Ɔ': 'O',\n  'Ɵ': 'O',\n  'Ꝋ': 'O',\n  'Ꝍ': 'O',\n  'Ƣ': 'OI',\n  'Ꝏ': 'OO',\n  'Ȣ': 'OU',\n  'Ⓟ': 'P',\n  'Ｐ': 'P',\n  'Ṕ': 'P',\n  'Ṗ': 'P',\n  'Ƥ': 'P',\n  'Ᵽ': 'P',\n  'Ꝑ': 'P',\n  'Ꝓ': 'P',\n  'Ꝕ': 'P',\n  'Ⓠ': 'Q',\n  'Ｑ': 'Q',\n  'Ꝗ': 'Q',\n  'Ꝙ': 'Q',\n  'Ɋ': 'Q',\n  'Ⓡ': 'R',\n  'Ｒ': 'R',\n  'Ŕ': 'R',\n  'Ṙ': 'R',\n  'Ř': 'R',\n  'Ȑ': 'R',\n  'Ȓ': 'R',\n  'Ṛ': 'R',\n  'Ṝ': 'R',\n  'Ŗ': 'R',\n  'Ṟ': 'R',\n  'Ɍ': 'R',\n  'Ɽ': 'R',\n  'Ꝛ': 'R',\n  'Ꞧ': 'R',\n  'Ꞃ': 'R',\n  'Ⓢ': 'S',\n  'Ｓ': 'S',\n  'ẞ': 'S',\n  'Ś': 'S',\n  'Ṥ': 'S',\n  'Ŝ': 'S',\n  'Ṡ': 'S',\n  'Š': 'S',\n  'Ṧ': 'S',\n  'Ṣ': 'S',\n  'Ṩ': 'S',\n  'Ș': 'S',\n  'Ş': 'S',\n  'Ȿ': 'S',\n  'Ꞩ': 'S',\n  'Ꞅ': 'S',\n  'Ⓣ': 'T',\n  'Ｔ': 'T',\n  'Ṫ': 'T',\n  'Ť': 'T',\n  'Ṭ': 'T',\n  'Ț': 'T',\n  'Ţ': 'T',\n  'Ṱ': 'T',\n  'Ṯ': 'T',\n  'Ŧ': 'T',\n  'Ƭ': 'T',\n  'Ʈ': 'T',\n  'Ⱦ': 'T',\n  'Ꞇ': 'T',\n  'Ꜩ': 'TZ',\n  'Ⓤ': 'U',\n  'Ｕ': 'U',\n  'Ù': 'U',\n  'Ú': 'U',\n  'Û': 'U',\n  'Ũ': 'U',\n  'Ṹ': 'U',\n  'Ū': 'U',\n  'Ṻ': 'U',\n  'Ŭ': 'U',\n  'Ü': 'U',\n  'Ǜ': 'U',\n  'Ǘ': 'U',\n  'Ǖ': 'U',\n  'Ǚ': 'U',\n  'Ủ': 'U',\n  'Ů': 'U',\n  'Ű': 'U',\n  'Ǔ': 'U',\n  'Ȕ': 'U',\n  'Ȗ': 'U',\n  'Ư': 'U',\n  'Ừ': 'U',\n  'Ứ': 'U',\n  'Ữ': 'U',\n  'Ử': 'U',\n  'Ự': 'U',\n  'Ụ': 'U',\n  'Ṳ': 'U',\n  'Ų': 'U',\n  'Ṷ': 'U',\n  'Ṵ': 'U',\n  'Ʉ': 'U',\n  'Ⓥ': 'V',\n  'Ｖ': 'V',\n  'Ṽ': 'V',\n  'Ṿ': 'V',\n  'Ʋ': 'V',\n  'Ꝟ': 'V',\n  'Ʌ': 'V',\n  'Ꝡ': 'VY',\n  'Ⓦ': 'W',\n  'Ｗ': 'W',\n  'Ẁ': 'W',\n  'Ẃ': 'W',\n  'Ŵ': 'W',\n  'Ẇ': 'W',\n  'Ẅ': 'W',\n  'Ẉ': 'W',\n  'Ⱳ': 'W',\n  'Ⓧ': 'X',\n  'Ｘ': 'X',\n  'Ẋ': 'X',\n  'Ẍ': 'X',\n  'Ⓨ': 'Y',\n  'Ｙ': 'Y',\n  'Ỳ': 'Y',\n  'Ý': 'Y',\n  'Ŷ': 'Y',\n  'Ỹ': 'Y',\n  'Ȳ': 'Y',\n  'Ẏ': 'Y',\n  'Ÿ': 'Y',\n  'Ỷ': 'Y',\n  'Ỵ': 'Y',\n  'Ƴ': 'Y',\n  'Ɏ': 'Y',\n  'Ỿ': 'Y',\n  'Ⓩ': 'Z',\n  'Ｚ': 'Z',\n  'Ź': 'Z',\n  'Ẑ': 'Z',\n  'Ż': 'Z',\n  'Ž': 'Z',\n  'Ẓ': 'Z',\n  'Ẕ': 'Z',\n  'Ƶ': 'Z',\n  'Ȥ': 'Z',\n  'Ɀ': 'Z',\n  'Ⱬ': 'Z',\n  'Ꝣ': 'Z',\n  'ⓐ': 'a',\n  'ａ': 'a',\n  'ẚ': 'a',\n  'à': 'a',\n  'á': 'a',\n  'â': 'a',\n  'ầ': 'a',\n  'ấ': 'a',\n  'ẫ': 'a',\n  'ẩ': 'a',\n  'ã': 'a',\n  'ā': 'a',\n  'ă': 'a',\n  'ằ': 'a',\n  'ắ': 'a',\n  'ẵ': 'a',\n  'ẳ': 'a',\n  'ȧ': 'a',\n  'ǡ': 'a',\n  'ä': 'a',\n  'ǟ': 'a',\n  'ả': 'a',\n  'å': 'a',\n  'ǻ': 'a',\n  'ǎ': 'a',\n  'ȁ': 'a',\n  'ȃ': 'a',\n  'ạ': 'a',\n  'ậ': 'a',\n  'ặ': 'a',\n  'ḁ': 'a',\n  'ą': 'a',\n  'ⱥ': 'a',\n  'ɐ': 'a',\n  'ꜳ': 'aa',\n  'æ': 'ae',\n  'ǽ': 'ae',\n  'ǣ': 'ae',\n  'ꜵ': 'ao',\n  'ꜷ': 'au',\n  'ꜹ': 'av',\n  'ꜻ': 'av',\n  'ꜽ': 'ay',\n  'ⓑ': 'b',\n  'ｂ': 'b',\n  'ḃ': 'b',\n  'ḅ': 'b',\n  'ḇ': 'b',\n  'ƀ': 'b',\n  'ƃ': 'b',\n  'ɓ': 'b',\n  'ⓒ': 'c',\n  'ｃ': 'c',\n  'ć': 'c',\n  'ĉ': 'c',\n  'ċ': 'c',\n  'č': 'c',\n  'ç': 'c',\n  'ḉ': 'c',\n  'ƈ': 'c',\n  'ȼ': 'c',\n  'ꜿ': 'c',\n  'ↄ': 'c',\n  'ⓓ': 'd',\n  'ｄ': 'd',\n  'ḋ': 'd',\n  'ď': 'd',\n  'ḍ': 'd',\n  'ḑ': 'd',\n  'ḓ': 'd',\n  'ḏ': 'd',\n  'đ': 'd',\n  'ƌ': 'd',\n  'ɖ': 'd',\n  'ɗ': 'd',\n  'ꝺ': 'd',\n  'ǳ': 'dz',\n  'ǆ': 'dz',\n  'ⓔ': 'e',\n  'ｅ': 'e',\n  'è': 'e',\n  'é': 'e',\n  'ê': 'e',\n  'ề': 'e',\n  'ế': 'e',\n  'ễ': 'e',\n  'ể': 'e',\n  'ẽ': 'e',\n  'ē': 'e',\n  'ḕ': 'e',\n  'ḗ': 'e',\n  'ĕ': 'e',\n  'ė': 'e',\n  'ë': 'e',\n  'ẻ': 'e',\n  'ě': 'e',\n  'ȅ': 'e',\n  'ȇ': 'e',\n  'ẹ': 'e',\n  'ệ': 'e',\n  'ȩ': 'e',\n  'ḝ': 'e',\n  'ę': 'e',\n  'ḙ': 'e',\n  'ḛ': 'e',\n  'ɇ': 'e',\n  'ɛ': 'e',\n  'ǝ': 'e',\n  'ⓕ': 'f',\n  'ｆ': 'f',\n  'ḟ': 'f',\n  'ƒ': 'f',\n  'ꝼ': 'f',\n  'ⓖ': 'g',\n  'ｇ': 'g',\n  'ǵ': 'g',\n  'ĝ': 'g',\n  'ḡ': 'g',\n  'ğ': 'g',\n  'ġ': 'g',\n  'ǧ': 'g',\n  'ģ': 'g',\n  'ǥ': 'g',\n  'ɠ': 'g',\n  'ꞡ': 'g',\n  'ᵹ': 'g',\n  'ꝿ': 'g',\n  'ⓗ': 'h',\n  'ｈ': 'h',\n  'ĥ': 'h',\n  'ḣ': 'h',\n  'ḧ': 'h',\n  'ȟ': 'h',\n  'ḥ': 'h',\n  'ḩ': 'h',\n  'ḫ': 'h',\n  'ẖ': 'h',\n  'ħ': 'h',\n  'ⱨ': 'h',\n  'ⱶ': 'h',\n  'ɥ': 'h',\n  'ƕ': 'hv',\n  'ⓘ': 'i',\n  'ｉ': 'i',\n  'ì': 'i',\n  'í': 'i',\n  'î': 'i',\n  'ĩ': 'i',\n  'ī': 'i',\n  'ĭ': 'i',\n  'ï': 'i',\n  'ḯ': 'i',\n  'ỉ': 'i',\n  'ǐ': 'i',\n  'ȉ': 'i',\n  'ȋ': 'i',\n  'ị': 'i',\n  'į': 'i',\n  'ḭ': 'i',\n  'ɨ': 'i',\n  'ı': 'i',\n  'ⓙ': 'j',\n  'ｊ': 'j',\n  'ĵ': 'j',\n  'ǰ': 'j',\n  'ɉ': 'j',\n  'ⓚ': 'k',\n  'ｋ': 'k',\n  'ḱ': 'k',\n  'ǩ': 'k',\n  'ḳ': 'k',\n  'ķ': 'k',\n  'ḵ': 'k',\n  'ƙ': 'k',\n  'ⱪ': 'k',\n  'ꝁ': 'k',\n  'ꝃ': 'k',\n  'ꝅ': 'k',\n  'ꞣ': 'k',\n  'ⓛ': 'l',\n  'ｌ': 'l',\n  'ŀ': 'l',\n  'ĺ': 'l',\n  'ľ': 'l',\n  'ḷ': 'l',\n  'ḹ': 'l',\n  'ļ': 'l',\n  'ḽ': 'l',\n  'ḻ': 'l',\n  'ſ': 'l',\n  'ł': 'l',\n  'ƚ': 'l',\n  'ɫ': 'l',\n  'ⱡ': 'l',\n  'ꝉ': 'l',\n  'ꞁ': 'l',\n  'ꝇ': 'l',\n  'ǉ': 'lj',\n  'ⓜ': 'm',\n  'ｍ': 'm',\n  'ḿ': 'm',\n  'ṁ': 'm',\n  'ṃ': 'm',\n  'ɱ': 'm',\n  'ɯ': 'm',\n  'ⓝ': 'n',\n  'ｎ': 'n',\n  'ǹ': 'n',\n  'ń': 'n',\n  'ñ': 'n',\n  'ṅ': 'n',\n  'ň': 'n',\n  'ṇ': 'n',\n  'ņ': 'n',\n  'ṋ': 'n',\n  'ṉ': 'n',\n  'ƞ': 'n',\n  'ɲ': 'n',\n  'ŉ': 'n',\n  'ꞑ': 'n',\n  'ꞥ': 'n',\n  'ǌ': 'nj',\n  'ⓞ': 'o',\n  'ｏ': 'o',\n  'ò': 'o',\n  'ó': 'o',\n  'ô': 'o',\n  'ồ': 'o',\n  'ố': 'o',\n  'ỗ': 'o',\n  'ổ': 'o',\n  'õ': 'o',\n  'ṍ': 'o',\n  'ȭ': 'o',\n  'ṏ': 'o',\n  'ō': 'o',\n  'ṑ': 'o',\n  'ṓ': 'o',\n  'ŏ': 'o',\n  'ȯ': 'o',\n  'ȱ': 'o',\n  'ö': 'o',\n  'ȫ': 'o',\n  'ỏ': 'o',\n  'ő': 'o',\n  'ǒ': 'o',\n  'ȍ': 'o',\n  'ȏ': 'o',\n  'ơ': 'o',\n  'ờ': 'o',\n  'ớ': 'o',\n  'ỡ': 'o',\n  'ở': 'o',\n  'ợ': 'o',\n  'ọ': 'o',\n  'ộ': 'o',\n  'ǫ': 'o',\n  'ǭ': 'o',\n  'ø': 'o',\n  'ǿ': 'o',\n  'ɔ': 'o',\n  'ꝋ': 'o',\n  'ꝍ': 'o',\n  'ɵ': 'o',\n  'ƣ': 'oi',\n  'ȣ': 'ou',\n  'ꝏ': 'oo',\n  'ⓟ': 'p',\n  'ｐ': 'p',\n  'ṕ': 'p',\n  'ṗ': 'p',\n  'ƥ': 'p',\n  'ᵽ': 'p',\n  'ꝑ': 'p',\n  'ꝓ': 'p',\n  'ꝕ': 'p',\n  'ⓠ': 'q',\n  'ｑ': 'q',\n  'ɋ': 'q',\n  'ꝗ': 'q',\n  'ꝙ': 'q',\n  'ⓡ': 'r',\n  'ｒ': 'r',\n  'ŕ': 'r',\n  'ṙ': 'r',\n  'ř': 'r',\n  'ȑ': 'r',\n  'ȓ': 'r',\n  'ṛ': 'r',\n  'ṝ': 'r',\n  'ŗ': 'r',\n  'ṟ': 'r',\n  'ɍ': 'r',\n  'ɽ': 'r',\n  'ꝛ': 'r',\n  'ꞧ': 'r',\n  'ꞃ': 'r',\n  'ⓢ': 's',\n  'ｓ': 's',\n  'ß': 's',\n  'ś': 's',\n  'ṥ': 's',\n  'ŝ': 's',\n  'ṡ': 's',\n  'š': 's',\n  'ṧ': 's',\n  'ṣ': 's',\n  'ṩ': 's',\n  'ș': 's',\n  'ş': 's',\n  'ȿ': 's',\n  'ꞩ': 's',\n  'ꞅ': 's',\n  'ẛ': 's',\n  'ⓣ': 't',\n  'ｔ': 't',\n  'ṫ': 't',\n  'ẗ': 't',\n  'ť': 't',\n  'ṭ': 't',\n  'ț': 't',\n  'ţ': 't',\n  'ṱ': 't',\n  'ṯ': 't',\n  'ŧ': 't',\n  'ƭ': 't',\n  'ʈ': 't',\n  'ⱦ': 't',\n  'ꞇ': 't',\n  'ꜩ': 'tz',\n  'ⓤ': 'u',\n  'ｕ': 'u',\n  'ù': 'u',\n  'ú': 'u',\n  'û': 'u',\n  'ũ': 'u',\n  'ṹ': 'u',\n  'ū': 'u',\n  'ṻ': 'u',\n  'ŭ': 'u',\n  'ü': 'u',\n  'ǜ': 'u',\n  'ǘ': 'u',\n  'ǖ': 'u',\n  'ǚ': 'u',\n  'ủ': 'u',\n  'ů': 'u',\n  'ű': 'u',\n  'ǔ': 'u',\n  'ȕ': 'u',\n  'ȗ': 'u',\n  'ư': 'u',\n  'ừ': 'u',\n  'ứ': 'u',\n  'ữ': 'u',\n  'ử': 'u',\n  'ự': 'u',\n  'ụ': 'u',\n  'ṳ': 'u',\n  'ų': 'u',\n  'ṷ': 'u',\n  'ṵ': 'u',\n  'ʉ': 'u',\n  'ⓥ': 'v',\n  'ｖ': 'v',\n  'ṽ': 'v',\n  'ṿ': 'v',\n  'ʋ': 'v',\n  'ꝟ': 'v',\n  'ʌ': 'v',\n  'ꝡ': 'vy',\n  'ⓦ': 'w',\n  'ｗ': 'w',\n  'ẁ': 'w',\n  'ẃ': 'w',\n  'ŵ': 'w',\n  'ẇ': 'w',\n  'ẅ': 'w',\n  'ẘ': 'w',\n  'ẉ': 'w',\n  'ⱳ': 'w',\n  'ⓧ': 'x',\n  'ｘ': 'x',\n  'ẋ': 'x',\n  'ẍ': 'x',\n  'ⓨ': 'y',\n  'ｙ': 'y',\n  'ỳ': 'y',\n  'ý': 'y',\n  'ŷ': 'y',\n  'ỹ': 'y',\n  'ȳ': 'y',\n  'ẏ': 'y',\n  'ÿ': 'y',\n  'ỷ': 'y',\n  'ẙ': 'y',\n  'ỵ': 'y',\n  'ƴ': 'y',\n  'ɏ': 'y',\n  'ỿ': 'y',\n  'ⓩ': 'z',\n  'ｚ': 'z',\n  'ź': 'z',\n  'ẑ': 'z',\n  'ż': 'z',\n  'ž': 'z',\n  'ẓ': 'z',\n  'ẕ': 'z',\n  'ƶ': 'z',\n  'ȥ': 'z',\n  'ɀ': 'z',\n  'ⱬ': 'z',\n  'ꝣ': 'z',\n  'Ά': 'Α',\n  'Έ': 'Ε',\n  'Ή': 'Η',\n  'Ί': 'Ι',\n  'Ϊ': 'Ι',\n  'Ό': 'Ο',\n  'Ύ': 'Υ',\n  'Ϋ': 'Υ',\n  'Ώ': 'Ω',\n  'ά': 'α',\n  'έ': 'ε',\n  'ή': 'η',\n  'ί': 'ι',\n  'ϊ': 'ι',\n  'ΐ': 'ι',\n  'ό': 'ο',\n  'ύ': 'υ',\n  'ϋ': 'υ',\n  'ΰ': 'υ',\n  'ω': 'ω',\n  'ς': 'σ'\n};\n\n// Copied from Select2\nexport function stripDiacritics(text) {\n  // Used 'uni range + named function' from http://jsperf.com/diacritics/18\n  function match(a) {\n    return DIACRITICS[a] || a;\n  }\n\n  return `${text}`.replace(/[^\\u0000-\\u007E]/g, match);\n}\n\nexport function defaultMatcher(value, text) {\n  return stripDiacritics(value).toUpperCase().indexOf(stripDiacritics(text).toUpperCase());\n}\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/components/power-select.js":"export { default } from 'ember-power-select/components/power-select';","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/components/power-select-multiple.js":"export { default } from 'ember-power-select/components/power-select-multiple';","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/helpers/ember-power-select-is-group.js":"export { default, emberPowerSelectIsGroup } from 'ember-power-select/helpers/ember-power-select-is-group';\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/helpers/ember-power-select-is-selected.js":"export { default, emberPowerSelectIsSelected } from 'ember-power-select/helpers/ember-power-select-is-selected';\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/helpers/ember-power-select-true-string-if-present.js":"export { default, emberPowerSelectTrueStringIfPresent } from 'ember-power-select/helpers/ember-power-select-true-string-if-present';\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/components/power-select/before-options.js":"import Component from 'ember-component';\nimport { scheduleOnce } from 'ember-runloop';\nimport layout from '../../templates/components/power-select/before-options';\n\nexport default Component.extend({\n  tagName: '',\n  layout,\n  autofocus: true,\n\n  // Lifecycle hooks\n  didInsertElement() {\n    this._super(...arguments);\n\n    if (this.get('autofocus')) {\n      this.focusInput();\n    }\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n    if (this.get('searchEnabled')) {\n      scheduleOnce('actions', this, this.get('select').actions.search, '');\n    }\n  },\n\n  // Actions\n  actions: {\n    onKeydown(e) {\n      let onKeydown = this.get('onKeydown');\n      if (onKeydown(e) === false) {\n        return false;\n      }\n      if (e.keyCode === 13) {\n        let select = this.get('select');\n        select.actions.close(e);\n      }\n    }\n  },\n\n  // Methods\n  focusInput() {\n    this.input = self.document.querySelector(`.ember-power-select-search-input[aria-controls=\"${this.get('listboxId')}\"]`);\n    if (this.input) {\n      scheduleOnce('afterRender', this.input, 'focus');\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/components/power-select-multiple/trigger.js":"import Ember from 'ember';\nimport Component from 'ember-component';\nimport layout from '../../templates/components/power-select-multiple/trigger';\nimport get from 'ember-metal/get';\nimport computed from 'ember-computed';\nimport service from 'ember-service/inject';\nimport { scheduleOnce } from 'ember-runloop';\nimport { assert } from 'ember-metal/utils';\nimport { isBlank } from 'ember-utils';\nimport { htmlSafe } from 'ember-string';\n\nconst { testing } = Ember;\n\nconst ua = self.window && self.window.navigator ? self.window.navigator.userAgent : '';\nconst isIE = ua.indexOf('MSIE ') > -1 || ua.indexOf('Trident/') > -1;\nconst isTouchDevice = (testing || !!self.window && 'ontouchstart' in self.window);\n\nexport default Component.extend({\n  tagName: '',\n  layout,\n  textMeasurer: service(),\n  _lastIsOpen: false,\n\n  // Lifecycle hooks\n  didInsertElement() {\n    this._super(...arguments);\n    let select = this.get('select');\n    this.input = document.getElementById(`ember-power-select-trigger-multiple-input-${select.uniqueId}`);\n    let inputStyle = this.input ? window.getComputedStyle(this.input) : null;\n    this.inputFont = inputStyle ? `${ inputStyle.fontStyle } ${  inputStyle.fontVariant} ${ inputStyle.fontWeight } ${ inputStyle.fontSize}/${ inputStyle.lineHeight } ${ inputStyle.fontFamily }` : null;\n    let optionsList = document.getElementById(`ember-power-select-multiple-options-${select.uniqueId}`);\n    let chooseOption = (e) => {\n      let selectedIndex = e.target.getAttribute('data-selected-index');\n      if (selectedIndex) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        let select = this.get('select');\n        let object = this.selectedObject(select.selected, selectedIndex);\n        select.actions.choose(object);\n      }\n    };\n    if (isTouchDevice) {\n      optionsList.addEventListener('touchstart', chooseOption);\n    }\n    optionsList.addEventListener('mousedown', chooseOption);\n  },\n\n  didReceiveAttrs() {\n    let oldSelect = this.get('oldSelect') || {};\n    let select = this.set('oldSelect', this.get('select'));\n    if (oldSelect.isOpen && !select.isOpen) {\n      scheduleOnce('actions', null, select.actions.search, '');\n    }\n  },\n\n  // CPs\n  triggerMultipleInputStyle: computed('select.searchText.length', 'select.selected.length', function() {\n    let select = this.get('select');\n    scheduleOnce('actions', select.actions.reposition);\n    if (!select.selected || select.selected.length === 0) {\n      return htmlSafe('width: 100%;');\n    } else {\n      let textWidth = 0;\n      if (this.inputFont) {\n        textWidth = this.get('textMeasurer').width(select.searchText, this.inputFont);\n      }\n      return htmlSafe(`width: ${textWidth + 25}px`);\n    }\n  }),\n\n  maybePlaceholder: computed('placeholder', 'select.selected.length', function() {\n    if (isIE) {\n      return null;\n    }\n    let select = this.get('select');\n    return (!select.selected || get(select.selected, 'length') === 0) ? (this.get('placeholder') || '') : '';\n  }),\n\n  // Actions\n  actions: {\n    onInput(e) {\n      let action = this.get('onInput');\n      if (action &&  action(e) === false) {\n        return;\n      }\n      this.get('select').actions.open(e);\n    },\n\n    onKeydown(e) {\n      let { onKeydown, select } = this.getProperties('onKeydown', 'select');\n      if (onKeydown && onKeydown(e) === false) {\n        e.stopPropagation();\n        return false;\n      }\n      if (e.keyCode === 8) {\n        e.stopPropagation();\n        if (isBlank(e.target.value)) {\n          let lastSelection = select.selected[select.selected.length - 1];\n          if (lastSelection) {\n            select.actions.select(this.get('buildSelection')(lastSelection, select), e);\n            if (typeof lastSelection === 'string') {\n              select.actions.search(lastSelection);\n            } else {\n              let searchField = this.get('searchField');\n              assert('`{{power-select-multiple}}` requires a `searchField` when the options are not strings to remove options using backspace', searchField);\n              select.actions.search(get(lastSelection, searchField));\n            }\n            select.actions.open(e);\n          }\n        }\n      } else if (e.keyCode >= 48 && e.keyCode <= 90 || e.keyCode === 32) { // Keys 0-9, a-z or SPACE\n        e.stopPropagation();\n      }\n    }\n  },\n\n  // Methods\n  selectedObject(list, index) {\n    if (list.objectAt) {\n      return list.objectAt(index);\n    } else {\n      return get(list, index);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/components/power-select/options.js":"import Component from 'ember-component';\nimport layout from '../../templates/components/power-select/options';\nimport computed from 'ember-computed';\n\n(function(ElementProto) {\n  if (typeof ElementProto.matches !== 'function') {\n    ElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector;\n  }\n\n  if (typeof ElementProto.closest !== 'function') {\n    ElementProto.closest = function closest(selector) {\n      let element = this;\n      while (element && element.nodeType === 1) {\n        if (element.matches(selector)) {\n          return element;\n        }\n        element = element.parentNode;\n      }\n      return null;\n    };\n  }\n})(window.Element.prototype);\n\nexport default Component.extend({\n  isTouchDevice: (!!self.window && 'ontouchstart' in self.window),\n  layout,\n  tagName: 'ul',\n  attributeBindings: ['role', 'aria-controls'],\n  role: 'listbox',\n\n  // Lifecycle hooks\n  didInsertElement() {\n    this._super(...arguments);\n    if (this.get('role') === 'group') {\n      return;\n    }\n    let findOptionAndPerform = (action, e) => {\n      let optionItem = e.target.closest('[data-option-index]');\n      if (!optionItem) {\n        return;\n      }\n      if (optionItem.closest('[aria-disabled=true]')) {\n        return; // Abort if the item or an ancestor is disabled\n      }\n      let optionIndex = optionItem.getAttribute('data-option-index');\n      action(this._optionFromIndex(optionIndex), e);\n    };\n    this.element.addEventListener('mouseup', (e) => findOptionAndPerform(this.get('select.actions.choose'), e));\n    this.element.addEventListener('mouseover', (e) => findOptionAndPerform(this.get('select.actions.highlight'), e));\n    if (this.get('isTouchDevice')) {\n      this._addTouchEvents();\n    }\n    if (this.get('role') !== 'group') {\n      let select = this.get('select');\n      select.actions.scrollTo(select.highlighted);\n    }\n  },\n\n  // CPs\n  'aria-controls': computed('select.uniqueId', function() {\n    return `ember-power-select-trigger-${this.get('select.uniqueId')}`;\n  }),\n\n  // Methods\n  _addTouchEvents() {\n    let touchMoveHandler = () => {\n      this.hasMoved = true;\n      this.element.removeEventListener('touchmove', touchMoveHandler);\n    };\n    // Add touch event handlers to detect taps\n    this.element.addEventListener('touchstart', () => {\n      this.element.addEventListener('touchmove', touchMoveHandler);\n    });\n    this.element.addEventListener('touchend', (e) => {\n      let optionItem = e.target.closest('[data-option-index]');\n\n      if (!optionItem || !(0 in optionItem)) {\n        return;\n      }\n\n      e.preventDefault();\n      if (this.hasMoved) {\n        this.hasMoved = false;\n        return;\n      }\n\n      let optionIndex = optionItem[0].getAttribute('data-option-index');\n      this.get('select.actions.choose')(this._optionFromIndex(optionIndex), e);\n    });\n  },\n\n  _optionFromIndex(index) {\n    let parts = index.split('.');\n    let options = this.get('options');\n    let option = options[parseInt(parts[0], 10)];\n    for (let i = 1; i < parts.length; i++) {\n      option = option.options[parseInt(parts[i], 10)];\n    }\n    return option;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/components/power-select/placeholder.js":"import Ember from 'ember';\nimport layout from '../../templates/components/power-select/placeholder';\n\nexport default Ember.Component.extend({\n  layout,\n  tagName: ''\n});\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/components/power-select/power-select-group.js":"import Component from 'ember-component';\nimport computed from 'ember-computed';\nimport layout from '../../templates/components/power-select/power-select-group';\n\nexport default Component.extend({\n  layout,\n  tagName: '',\n  disabled: computed.reads('group.disabled'),\n  groupName: computed.reads('group.groupName')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/components/power-select/search-message.js":"import Component from 'ember-component';\nimport layout from '../../templates/components/power-select/search-message';\n\nexport default Component.extend({\n  layout,\n  tagName: ''\n});\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/addon/components/power-select/trigger.js":"import Component from 'ember-component';\nimport layout from '../../templates/components/power-select/trigger';\n\nexport default Component.extend({\n  layout,\n  tagName: '',\n\n  // Actions\n  actions: {\n    clear(e) {\n      e.stopPropagation();\n      this.get('select').actions.select(null);\n      if (e.type === 'touchstart') {\n        return false;\n      }\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/components/power-select/before-options.js":"export { default } from 'ember-power-select/components/power-select/before-options';","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/components/power-select-multiple/trigger.js":"export { default } from 'ember-power-select/components/power-select-multiple/trigger';","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/components/power-select/options.js":"export { default } from 'ember-power-select/components/power-select/options';","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/components/power-select/placeholder.js":"export { default } from 'ember-power-select/components/power-select/placeholder';","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/components/power-select/power-select-group.js":"export { default } from 'ember-power-select/components/power-select/power-select-group';","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/components/power-select/search-message.js":"export { default } from 'ember-power-select/components/power-select/search-message';","/home/travis/build/npmtest/node-npmtest-ember-power-select/node_modules/ember-power-select/app/components/power-select/trigger.js":"export { default } from 'ember-power-select/components/power-select/trigger';"}